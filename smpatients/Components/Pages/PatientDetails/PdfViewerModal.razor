@implements IDialogContentComponent<DialogData>
@inject PatientServices patientService
@inject HttpClient httpClient

@attribute [StreamRendering]
<!-- FluentDialogHeader with icon and title -->

<!-- FluentDialogBody containing file -->
<FluentDialogBody>
    <div class="row mb-3">
        <div class="col-12 justify-content-center">
            @if(IsLoading )
            {
                    <FluentProgressRing></FluentProgressRing>
            }
            else{
               @if (!string.IsNullOrEmpty(FileBase64))
                {
                <iframe src="@FileBase64"  width="1020" height="660" frameborder="0"></iframe>
                }
                else
                {
                    <p>@eventLog</p>
                }
            }
        </div>
    </div>
</FluentDialogBody>


@code {
    // Parameters for the dialog content
    [Parameter]
    public DialogData Content { get; set; } = new DialogData(); 
    
  
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    
    // EditContext for the EditForm
    
    // Loading indicator
    private bool IsLoading { get; set; } = false;

    // Method to cancel and close the dialog
    private async Task CancelAsync()
    {
        if (Dialog != null)
        {

            await Dialog.CancelAsync();
        }
    }
      private Dictionary<string, string> mimeTypes;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
         await InvokeAsync(StateHasChanged);    
        // Define MIME types for each file type
        mimeTypes = new Dictionary<string, string>
        {
            { ".pdf", "application/pdf" },
            { ".xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" },
            { ".xls", "application/vnd.ms-excel" },
            { ".csv", "text/csv" },
            { ".docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document" },
            { ".doc", "application/msword" },
            { ".txt", "text/plain" },
            { ".ppt", "application/vnd.ms-powerpoint" },
            { ".pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation" },
            { ".jpg", "image/jpeg" },  // JPEG image
            { ".jpeg", "image/jpeg" }, // JPEG image
            { ".png", "image/png" },    // PNG image
            { ".gif", "image/gif" },    // GIF image
            { ".bmp", "image/bmp" }     // BMP image
        };

        // Convert file to base64 and store it in FileBase64 property
        ConvertFileToBase64(Content.Name);
        StateHasChanged();
    }
    private async Task ConvertFileToBase64(string fileUrl)
    {
        try
        {
                FileType = Path.GetExtension(fileUrl); // Get file extension   
            var folder = await DetermineLocalFilePath(fileUrl);   
            var folderloc = folder;       
            Console.WriteLine($"folder: {folderloc}");

            Console.WriteLine($"filename: {Path.GetFileName(fileUrl)},  Type  {FileType}");
            if (File.Exists(folderloc))
            {
                byte[] fileBytes = File.ReadAllBytes(folderloc);
               Console.WriteLine($"path: {fileBytes.ToString()}");
                
                if (mimeTypes.ContainsKey(FileType))
                {
                    FileBase64 = $"data:{mimeTypes[FileType]};base64,{Convert.ToBase64String(fileBytes)}";
                    Console.WriteLine(FileBase64);
                }
                else
                {
                    eventLog = "Unsupported file type.";
                }
            }
            else
            {
                eventLog = "File not found.";
            }
        }
        catch (Exception ex)
        {
            eventLog = $"Error ex: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private string FileType { get; set; }
    private string FileBase64 { get; set; }
    private string eventLog { get; set; }
    // Method to add a review
    private async Task<string> DetermineLocalFilePath(string fileUrl)
    {
        if (patientService == null || string.IsNullOrEmpty(fileUrl))
            return null;

        string localFilePath = "";
        if (patientService.isPDF(fileUrl))
            localFilePath = Path.Combine("wwwroot", "files", $"{Path.GetFileName(fileUrl)}");
        else if (patientService.IsDocumentFile(fileUrl))
            localFilePath = Path.Combine("wwwroot", "documents", $"{Path.GetFileName(fileUrl)}");
        else if (patientService.IsVideoFile(fileUrl))
            localFilePath = Path.Combine("wwwroot", "videos", $"{Path.GetFileName(fileUrl)}");
        else if (patientService.IsImageFile(fileUrl))
            localFilePath = Path.Combine("wwwroot", "images", $"{Path.GetFileName(fileUrl)}");
        else
            localFilePath = Path.Combine("wwwroot", "others", $"{Path.GetFileName(fileUrl)}");

        Console.WriteLine($"LocalFilePath: {localFilePath}");
        return localFilePath;
    }
}



