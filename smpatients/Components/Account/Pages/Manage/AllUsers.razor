@page "/AllUsersRoles"
@page "/Account/Manage/AllUsersRoles"
@using Microsoft.AspNetCore.Identity
@using smpatients.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using System.Data
@inject UserManager<ApplicationUser> userManager
@inject RoleManager<IdentityRole> roleManager
@inject ApplicationDbContext _dbcontext
@rendermode InteractiveServer

<AuthorizeView Policy="Admin">
    <Authorized>
    <h3>Manage Roles</h3>
    <div class="row">    
        <div class="col-md-6"> 
            <div class="row">
                    <EditForm Context="editContext" Model="_RoleDto" OnValidSubmit="AddRole">
                        <DataAnnotationsValidator />
                        <div class="card">
                            <div class="card-body">
                                <div class="col-sm-12">

                                
                                <label class="text-muted mb-1">Role New Name: </label>
                                <FluentTextField Placeholder="Role Name Here..." style="width: 100%;" @bind-Value="_RoleDto.RoleName"></FluentTextField>
                                <ValidationMessage For="() => _RoleDto.RoleName" class="col-sm-8" />
                                <br />
                               </div>
                            </div>
                             <div class="card-footer">
                                    <button type="submit" class="btn btn-primary btn-sm">Submit Role</button>
                            </div>
                        </div>

                        <div>
                            @if (SavedChanges.Any())
                            {
                                <ul>
                                    <li class="m-1 d-inline-block alert-success">@SavedChanges.Last()</li>
                                </ul>
                            }
                        </div>

                    </EditForm>
            </div>
           
        </div>
        <div class="col-md-6">
             <table class="table table-sm table-bordered rounded">
                <thead class="thead-dark">
                    <tr>
                        <th>Name</th>
                        <th>Delete</th>
                        <th>Update</th>
                        <th>Detail</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var role in Roles)
                    {
                        <tr>
                            <td>
                                <div class="">
                                    @if (InEditMood)
                                    {
                                        <EditForm Model="@role" Context="roleContext"
                                            OnValidSubmit="async () =>{InEditMood = !InEditMood;await UpdateRole(role);}">
                                            <DataAnnotationsValidator />
                                            <FluentTextField @bind-Value="@role.Name"></FluentTextField>
                                            <ValidationMessage For="() => _RoleDto.RoleName" />
                                        </EditForm>
                                    }
                                    else
                                    {
                                            <p>@role.Name</p>
                                    }
                                </div>
                            </td>
                            <td>
                               
                                <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" Disabled="@(role.Name == "admin")" @onclick="async () => { await DeleteRole(role); }"></FluentButton>
                                
                                </td>
                                <td>
                                    
                                <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" Disabled="@(role.Name == "admin")" @onclick="() => { InEditMood = !InEditMood; }"></FluentButton>
                                </td>
                                <td>

                                <FluentButton IconEnd="@(new Icons.Regular.Size16.PersonInfo())" @onclick="async () => { await ShowRole(role); }">Show Users In Role</FluentButton>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
            @if (Errors.Any())
            {
                foreach (var error in Errors)
                {
                    <p class="text-danger"> @error.Message</p>
                    <div class="text-danger"> @error.InnerException</div>
                }
            }

    </div>
    <div class="row">
        @if (Role !=null)
        {
            if(Role.Name!=null)
            {
            <div class="col-12 col-lg-12">
                <div class="my-2 mx-2">
                @* <p>role ID : @Role.Id</p> *@
                <h3>@Role.Name.ToUpper() ROLE</h3>
                <EditForm Model="_User" Context="userContext" OnValidSubmit="AddUserRole">
                    <label>Add users to this Role</label>
                    <InputSelect class="form-select" @bind-Value="_User.Id">
                      
                    <option value=""></option>
                        @foreach (var user in Users)
                        {
                            <option value="@user.Id">@user.Username</option>
                        }
                    </InputSelect>
                    <button class="btn btn-primary my-2" type="submit">Add User</button>
                </EditForm>
                @if(RoleUsers.Any())
                {
                <table class="table table-sm table-bordered">
                    @{
                        var num = 1;
                    }
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">UserName</th>
                            <th scope="col">ID</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    @foreach (var user in RoleUsers)
                    {
                        <tr>
                            <th scope="row">@(num++)</th>
                            <td>@user.Username</td>
                            <td>@user.Id</td>
                            <td>

                            <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" Disabled="@(user.Username == "administrator@smpatients.org")"
                                    @onclick="async () => { await DeleteUserRole(new IdentityUserRole<string>() { RoleId = Role.Id, UserId = user.Id }); }"
                                    >
                                </FluentButton>
                            </td>
                        </tr>
                    }
                </table>
                }
                </div>
            </div>
            }
        }
    </div>
    </Authorized>
    <NotAuthorized>
        <h3 class="text-danger">You are not allowed to view this page, if you think otherwise contact 
               </h3>
    </NotAuthorized>
</AuthorizeView>

@code {

    class User
    {
        public string Id { get; set; }
        public string Username { get; set; }
    }
    class RoleDto
    {
        [Required(ErrorMessage = "Role Name is required.")]
        [MaxLength(50, ErrorMessage = "Role Name Should be at least of len 2 and at most 50")]
        [MinLength(2, ErrorMessage = "Role Name Should be at least of len 2 and at most 50")]
        public string RoleName { get; set; }
    }


    // things to do with the role maneging
    RoleDto _RoleDto { get; set; } = new();
    IdentityRole Role { get; set; } = new();
    List<IdentityRole> Roles { get; set; } = new();

    // users to a role things
    List<User> RoleUsers { get; set; } = new();
    List<User> Users { get; set; } = new();
    User _User { get; set; } = new();

    // just general things
    Queue<string> SavedChanges { get; set; } = new();
    List<Exception> Errors { get; set; } = new();
    bool InEditMood { get; set; } = false;


    protected override async Task OnParametersSetAsync()
    {
        Roles = roleManager.Roles.ToList();
        await base.OnParametersSetAsync();
    }

    async Task ShowRole(IdentityRole role)
    {
        this.Role = role;
        var allUsers =  userManager.Users.ToList();
        var usersNotInRole = new List<ApplicationUser>();
        var usersInRole = new List<ApplicationUser>();
        foreach (ApplicationUser user in allUsers)
        {
            var roles = await userManager.GetRolesAsync(user);
            if (!roles.Contains(role.Name))
                usersNotInRole.Add(user);
            if (roles.Contains(role.Name))
                usersInRole.Add(user);

        }
        Users = usersNotInRole.Select(u => new User { Id = u.Id, Username = u.UserName }).ToList();
        // Convert the users to the User model
        var Users1 = usersInRole.Select(u => new User { Id = u.Id, Username = u.UserName }).ToList();
        // Assign users to RoleUsers
        RoleUsers = Users1.ToList();
    }



    async Task AddRole()
    {
        await using var transaction = await _dbcontext.Database.BeginTransactionAsync();
        try
        {
            await roleManager.CreateAsync(new IdentityRole(_RoleDto.RoleName));
            await _dbcontext.SaveChangesAsync();
            Roles = roleManager.Roles.ToList();
            await transaction.CommitAsync();
            await Task.Run(async () =>
            {
                SavedChanges.Enqueue("Added Successfully");
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(5));
                SavedChanges.Dequeue();
                await InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Errors.Add(ex);
            await transaction.RollbackAsync();
        }
    }


    async Task UpdateRole(IdentityRole role)
    {
        await using var transaction = await _dbcontext.Database.BeginTransactionAsync();
        try
        {
            await roleManager.UpdateAsync(role);
            await roleManager.UpdateNormalizedRoleNameAsync(role);
            await _dbcontext.SaveChangesAsync();
            Roles = roleManager.Roles.ToList();
            await transaction.CommitAsync();
            await Task.Run(async () =>
            {
                SavedChanges.Enqueue("Updated Successfully");
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(5));
                SavedChanges.Dequeue();
                await InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Errors.Add(ex);
            await transaction.RollbackAsync();
        }
    }


    async Task DeleteRole(IdentityRole role)
    {
        await using var transaction = await _dbcontext.Database.BeginTransactionAsync();
        try
        {
            _dbcontext.Roles.Remove(role);
            await _dbcontext.SaveChangesAsync();
            Roles = roleManager.Roles.ToList();

            await transaction.CommitAsync();
            await Task.Run(async () =>
            {
                SavedChanges.Enqueue("Deleted Successfully");
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(5));
                SavedChanges.Dequeue();
                await InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Errors.Add(ex);
            await transaction.RollbackAsync();
        }
    }


    async Task AddUserRole()
    {
        if (string.IsNullOrEmpty(_User.Id))
        {
            await Task.Run(async () =>
            {
                SavedChanges.Enqueue("You Can't Leave This Empty, please Choose a user");
                await Task.Delay(TimeSpan.FromSeconds(5));
                SavedChanges.Dequeue();
                await InvokeAsync(StateHasChanged);
            });
            return;
        }
        else
        {
            _User.Username = (await _dbcontext.Users.FindAsync(_User.Id))?.UserName;
        }

        await using var transaction = await _dbcontext.Database.BeginTransactionAsync();
        try
        {
            await _dbcontext.UserRoles.AddAsync(new IdentityUserRole<string>() { UserId = _User.Id, RoleId = Role.Id });
            await _dbcontext.SaveChangesAsync();
            var usersInRole = await userManager.GetUsersInRoleAsync(Role.Name);

            // Convert the users to the User model
            Users = usersInRole.Select(u => new User { Id = u.Id, Username = u.UserName }).ToList();

            // Assign users to RoleUsers
            RoleUsers = Users.ToList();
            await ShowRole(Role);
            await transaction.CommitAsync();
            await Task.Run(async () =>
            {
                SavedChanges.Enqueue("Added Successfully");
                await InvokeAsync(StateHasChanged);
                await Task.Delay(TimeSpan.FromSeconds(2));
                SavedChanges.Dequeue();
                await InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Errors.Add(ex);
            await transaction.RollbackAsync();
        }
    }

    async Task DeleteUserRole(IdentityUserRole<string> userRole)
    {
        using var transaction = await _dbcontext.Database.BeginTransactionAsync();
        try
        {
            if (_dbcontext.Database.GetDbConnection().State != ConnectionState.Open)
            {
            await _dbcontext.Database.GetDbConnection().OpenAsync();
            }

        // Find the tracked entity, if any, and detach it
        var trackedEntity = _dbcontext.ChangeTracker.Entries<IdentityUserRole<string>>()
            .FirstOrDefault(e => e.Entity.UserId == userRole.UserId && e.Entity.RoleId == userRole.RoleId);

        if (trackedEntity != null)
        {
            trackedEntity.State = EntityState.Detached;
        }

        _dbcontext.UserRoles.Remove(userRole);
        await _dbcontext.SaveChangesAsync();
        

        await transaction.CommitAsync();
        await Task.Run(async () =>
        {
            SavedChanges.Enqueue("deleted Successfully");
            await InvokeAsync(StateHasChanged);
            SavedChanges.Dequeue();
            await InvokeAsync(StateHasChanged);
        });
        RoleUsers = null;
        var usersInRole = await userManager.GetUsersInRoleAsync(Role.Name);

        // Convert the users to the User model
        Users = usersInRole.Select(u => new User { Id = u.Id, Username = u.UserName }).ToList();

        // Assign users to RoleUsers
        RoleUsers = Users.ToList();
        await ShowRole(Role);
    }
    catch (Exception ex)
    {
        Errors.Add(ex);
        await transaction.RollbackAsync();
    }
}



}